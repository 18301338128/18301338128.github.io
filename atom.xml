<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sharker&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-07T04:02:55.723Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>珂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《算法图解》笔记</title>
    <link href="http://yoursite.com/2019/10/07/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/10/07/《算法图解》笔记/</id>
    <published>2019-10-07T03:23:22.432Z</published>
    <updated>2019-10-07T04:02:55.723Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/pic/3.png" alt="image"></p><a id="more"></a><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def quicksort(array):</span><br><span class="line">    if len(array)&lt;2:</span><br><span class="line">        return array</span><br><span class="line">    else:</span><br><span class="line">        pivot=array[0]</span><br><span class="line">        less = [i for i in array[1:] if i &lt; array[0]]</span><br><span class="line">        greater = [i for i in array[1:] if i &gt; array[0]]</span><br><span class="line">        return quicksort(less) + [pivot] + quicksort(greater)</span><br></pre></td></tr></table></figure><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>寻找朋友圈的销售商，搜索一条能到达的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[&apos;you&apos;] = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">def search(name):</span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph(name)</span><br><span class="line">    searched = []</span><br><span class="line">    while search_queue:</span><br><span class="line">        person = search_queue.popleft()</span><br><span class="line">        if person not in searched:</span><br><span class="line">            if person_is_seller(person):</span><br><span class="line">                print person + &apos; is a mango seller&apos;</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                search_queue += graph[person]</span><br><span class="line">                searched.append(person)</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">search(&apos;you&apos;)</span><br></pre></td></tr></table></figure><h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><ul><li>寻找起点到终点的最佳路径</li><li>适用于有向无环图和非负权重（负权重使用贝尔曼-福德算法）</li></ul><p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/paper-pic/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95.png" alt="image"></p><table><thead><tr><th>from</th><th>to</th><th>value</th></tr></thead><tbody><tr><td>start</td><td>a</td><td>6</td></tr><tr><td>start</td><td>b</td><td>2</td></tr><tr><td>a</td><td>fin</td><td>1</td></tr><tr><td>b</td><td>a</td><td>3</td></tr><tr><td>b</td><td>fin</td><td>5</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">start a 6</span><br><span class="line">start b 2</span><br><span class="line">a fin 1</span><br><span class="line">b a 3</span><br><span class="line">b fin 5</span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[&apos;start&apos;] = &#123;&#125;</span><br><span class="line">graph[&apos;start&apos;][&apos;a&apos;] = 6</span><br><span class="line">graph[&apos;start&apos;][&apos;b&apos;] = 2</span><br><span class="line">graph[&apos;a&apos;] = &#123;&#125;</span><br><span class="line">graph[&apos;a&apos;][&apos;fin&apos;] = 1</span><br><span class="line">graph[&apos;b&apos;] = &#123;&#125;</span><br><span class="line">graph[&apos;b&apos;][&apos;a&apos;] = 3</span><br><span class="line">graph[&apos;b&apos;][&apos;fin&apos;] = 5</span><br><span class="line">graph[&apos;fin&apos;] = &#123;&#125;</span><br><span class="line">graph</span><br><span class="line"># &#123;&apos;start&apos;: &#123;&apos;a&apos;: 6, &apos;b&apos;: 2&#125;, &apos;a&apos;: &#123;&apos;fin&apos;: 1&#125;, &apos;b&apos;: &#123;&apos;a&apos;: 3, &apos;fin&apos;: 5&#125;, &apos;fin&apos;: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">infinity = float(&apos;inf&apos;)</span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[&apos;a&apos;] = 6</span><br><span class="line">costs[&apos;b&apos;] = 2</span><br><span class="line">costs[&apos;fin&apos;] = infinity</span><br><span class="line">costs # &#123;&apos;a&apos;: 6, &apos;b&apos;: 2, &apos;fin&apos;: inf&#125;</span><br><span class="line"></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[&apos;a&apos;] = &apos;start&apos;</span><br><span class="line">parents[&apos;b&apos;] = &apos;start&apos;</span><br><span class="line">parents[&apos;fin&apos;] = None</span><br><span class="line">parents # &#123;&apos;a&apos;: &apos;start&apos;, &apos;b&apos;: &apos;start&apos;, &apos;fin&apos;: None&#125;</span><br><span class="line"></span><br><span class="line">processed = []     </span><br><span class="line"></span><br><span class="line">def find_lowest_cost_node(costs):</span><br><span class="line">    lowest_cost = float(&apos;inf&apos;)</span><br><span class="line">    lowest_cost_node = None</span><br><span class="line">    for node in costs:</span><br><span class="line">        cost = costs[node]</span><br><span class="line">        if cost &lt; lowest_cost and node not in processed:</span><br><span class="line">            lowest_cost = cost</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    return lowest_cost_node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line">while node is not None:</span><br><span class="line">    cost = costs[node]</span><br><span class="line">    neighbors = graph[node]</span><br><span class="line">    for n in neighbors.keys():</span><br><span class="line">        new_cost = cost + neighbors[n]</span><br><span class="line">        print(node,n,cost,neighbors[n],new_cost,costs[n])</span><br><span class="line">        if costs[n] &gt; new_cost:</span><br><span class="line">            costs[n] = new_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    processed.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processed # [&apos;b&apos;, &apos;a&apos;, &apos;fin&apos;]</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>找出背包能装下的物品价值最高的组合</p><p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/paper-pic/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cell[i][j] = max(cell[i-1][j], cell[i-1][j-当前商品的重量])</span><br></pre></td></tr></table></figure><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>判断单词间最长公共串大小</p><p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/paper-pic/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if word_a[i] == word_b[j]:</span><br><span class="line">    cell[i][j] = cell[i-1][j-1] + 1</span><br><span class="line">else:</span><br><span class="line">    cell[i][j] = 0</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>判断单词间公共串数量</p><p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/paper-pic/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if word_a[i] == word_d[j]:</span><br><span class="line">    cell[i][j] = cell[i-1][j-1] + 1</span><br><span class="line">else:</span><br><span class="line">    cell[i][j] = max(cell[i-1][j], cell[i][j-1])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/loading.png&quot; data-original=&quot;https://18301338128.github.io/images/pic/3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04.3安装uwsgi</title>
    <link href="http://yoursite.com/2019/10/04/error/"/>
    <id>http://yoursite.com/2019/10/04/error/</id>
    <published>2019-10-04T08:12:00.799Z</published>
    <updated>2019-10-07T04:00:18.330Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/loading.png" data-original="https://18301338128.github.io/images/pic/2.png" alt="image"></p><!-- <img src="/images/loading.png" data-original="https://18301338128.github.io/images/background.png" width=100% /> --><a id="more"></a><h4 id="ubuntu-16-04-3安装uwsgi"><a href="#ubuntu-16-04-3安装uwsgi" class="headerlink" title="ubuntu 16.04.3安装uwsgi"></a>ubuntu 16.04.3安装uwsgi</h4><p>==报错1 uwsgi ERROR: Command errored out with exit status 1==</p><p><a href="https://github.com/unbit/uwsgi/issues/1770" target="_blank" rel="noopener">原文地址</a></p><p>安装旧版本的编译器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  install gcc-4.7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /usr/bin/gcc</span><br><span class="line">lrwxrwxrwx 1 root root 14 Aug  9 09:58 /usr/bin/gcc -&gt; /usr/bin/gcc-5</span><br></pre></td></tr></table></figure><p>建立软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/gcc</span><br><span class="line">sudo ln -s /usr/bin/gcc-4.7 /usr/bin/gcc</span><br></pre></td></tr></table></figure><p>安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi==2.0.15</span><br></pre></td></tr></table></figure><p>回到之前的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/gcc</span><br><span class="line">sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc</span><br></pre></td></tr></table></figure><p>==报错2 uwsgi: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/anaconda3/bin/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure><h4 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br><span class="line">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>==报错3 Microsoft Visual C++ 14.0 is required. –rcssmin、rjsmin、django-compressor==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install rcssmin --install-option=&quot;--without-c-extensions&quot;</span><br><span class="line">pip install rjsmin --install-option=&quot;--without-c-extensions&quot;</span><br><span class="line">pip install django-compressor --upgrade</span><br></pre></td></tr></table></figure><p>查看历史版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install yolk3k</span><br><span class="line">$ yolk -V django</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/loading.png&quot; data-original=&quot;https://18301338128.github.io/images/pic/2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;!-- &lt;img src=&quot;/images/loading.png&quot; data-original=&quot;https://18301338128.github.io/images/background.png&quot; width=100% /&gt; --&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
      <category term="uwsgi" scheme="http://yoursite.com/tags/uwsgi/"/>
    
  </entry>
  
</feed>
