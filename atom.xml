<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sharker&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xu-ke.top/"/>
  <updated>2019-10-09T11:01:48.242Z</updated>
  <id>http://xu-ke.top/</id>
  
  <author>
    <name>珂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《算法图解》笔记</title>
    <link href="http://xu-ke.top/2019/10/07/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://xu-ke.top/2019/10/07/《算法图解》笔记/</id>
    <published>2019-10-07T03:23:22.432Z</published>
    <updated>2019-10-09T11:01:48.242Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://18301338128.github.io/images/pic/3.jpg" alt="image"></p><a id="more"></a><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>分而治之（divide and conquer,  D&amp;C）思想的解题步骤：</p><ol><li><p>找出基线条件，这种条件必须尽可能简单。</p></li><li><p>不断将问题分解（或者说缩小规模），直到符合基线条件。</p><p>python代码实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(array)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> array <span class="comment"># 基线条件</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot=array[<span class="number">0</span>] <span class="comment"># 递归条件</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; array[<span class="number">0</span>]]</span><br><span class="line">        greater = [i <span class="keyword">for</span> i <span class="keyword">in</span> array[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; array[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> quicksort(less) + [pivot] + quicksort(greater)</span><br></pre></td></tr></table></figure></li></ol><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>广度优先搜索 （breadth-first search，BFS）是一种用于图的查找算法，可帮助回答两类问题：</p><ol><li>从节点A出发，有前往节点B的路径吗？</li><li>从节点A出发，前往节点B的哪条路径最短？</li></ol><p>书中示例：在朋友圈中寻找卖芒果的销售商</p><center><img src="https://img-blog.csdnimg.cn/20191007171940573.png" width="400" height="500" div align="center"></center><p>python实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">'you'</span>] = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph(name)</span><br><span class="line">    searched = []</span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">        person = search_queue.popleft()</span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person):</span><br><span class="line">                <span class="keyword">print</span> person + <span class="string">' is a mango seller'</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue += graph[person]</span><br><span class="line">                searched.append(person)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">search(<span class="string">'you'</span>)</span><br></pre></td></tr></table></figure><h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><p>狄克斯特拉算法包含4个步骤：</p><ol><li>找出“最便宜”的节点，即可在最短时间内到达的节点。</li><li>更新该节点的邻居的开销，节点的开销指的是从起点出发到该节点的时间</li><li>重复这个过程，直到对图中的每个节点都这样做了。</li><li>计算最终路径。</li></ol><p>狄克斯特拉算法适用于以下情况：</p><ul><li>有向无环图</li><li>非负权重（负权重使用贝尔曼-福德算法）</li></ul><p>狄克斯特拉算法的实现，以下图为例，从起点到终点，途中有A和B点，怎样走才能使得距离最短呢？</p><center><img src="https://img-blog.csdnimg.cn/20191007173651166.png" width="400" height="200" div align="center"></center><p>要编写解决这个问题的代码，需要三个散列表：</p><ul><li>graph记录图中节点间的关系，包括节点间指向和边的权重</li><li>costs记录节点的开销</li><li>parents记录父节点</li><li><center><img src="https://img-blog.csdnimg.cn/20191007174515374.png" width="500" height="300" div align="center"></center></li></ul><p>三个散列表python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">start a <span class="number">6</span></span><br><span class="line">start b <span class="number">2</span></span><br><span class="line">a fin <span class="number">1</span></span><br><span class="line">b a <span class="number">3</span></span><br><span class="line">b fin <span class="number">5</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">'start'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'start'</span>][<span class="string">'a'</span>] = <span class="number">6</span></span><br><span class="line">graph[<span class="string">'start'</span>][<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">graph[<span class="string">'a'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'a'</span>][<span class="string">'fin'</span>] = <span class="number">1</span></span><br><span class="line">graph[<span class="string">'b'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'b'</span>][<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">graph[<span class="string">'b'</span>][<span class="string">'fin'</span>] = <span class="number">5</span></span><br><span class="line">graph[<span class="string">'fin'</span>] = &#123;&#125;</span><br><span class="line">graph</span><br><span class="line"><span class="comment"># &#123;'start': &#123;'a': 6, 'b': 2&#125;, 'a': &#123;'fin': 1&#125;, 'b': &#123;'a': 3, 'fin': 5&#125;, 'fin': &#123;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">infinity = float(<span class="string">'inf'</span>)</span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">'a'</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">'fin'</span>] = infinity</span><br><span class="line">costs <span class="comment"># &#123;'a': 6, 'b': 2, 'fin': inf&#125;</span></span><br><span class="line"></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">'a'</span>] = <span class="string">'start'</span></span><br><span class="line">parents[<span class="string">'b'</span>] = <span class="string">'start'</span></span><br><span class="line">parents[<span class="string">'fin'</span>] = <span class="literal">None</span></span><br><span class="line">parents <span class="comment"># &#123;'a': 'start', 'b': 'start', 'fin': None&#125;</span></span><br><span class="line"></span><br><span class="line">processed = [] <span class="comment"># 用于记录处理过的节点</span></span><br></pre></td></tr></table></figure><p>算法图如下：</p><center><img src="https://img-blog.csdnimg.cn/20191007175752596.png" width="250" height="300"></center><p>pythond代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span><br><span class="line">    lowest_cost = float(<span class="string">'inf'</span>)</span><br><span class="line">    lowest_cost_node = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs:</span><br><span class="line">        cost = costs[node]</span><br><span class="line">        <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span><br><span class="line">            lowest_cost = cost</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    cost = costs[node]</span><br><span class="line">    neighbors = graph[node]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">        new_cost = cost + neighbors[n]</span><br><span class="line">        print(node,n,cost,neighbors[n],new_cost,costs[n])</span><br><span class="line">        <span class="keyword">if</span> costs[n] &gt; new_cost:</span><br><span class="line">            costs[n] = new_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    processed.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划先解决子问题，再解决大问题</p><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p>背包问题旨在找出背包能装下的物品价值最高的组合<br>对于1kg，2kg，3kg，和4kg的背包分别逐行计算能放下物品的最高重量，当进行到用4kg背包装电脑时，发现多了1kg，于是将1kg背包里的吉他加入4kg背包，得到3500。</p><center><img src="https://img-blog.csdnimg.cn/20191007181730711.png" width="300" height="300"><img src="https://img-blog.csdnimg.cn/20191007164806770.png" width="400" height="200"></center><p>每一格的计算代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cell[i][j] = max(cell[i<span class="number">-1</span>][j], cell[i<span class="number">-1</span>][j-当前商品的重量])</span><br></pre></td></tr></table></figure><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>最长公共子串用于判断单词间最长公共串大小<br>如hish和fish</p><center><img src="https://img-blog.csdnimg.cn/20191007181357803.png" width="300" height="300"></center>每一格的计算代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> word_a[i] == word_b[j]:</span><br><span class="line">    cell[i][j] = cell[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cell[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>最长公共子序列用于判断单词间公共串数量<br>如fosh和fish</p><center><img src="https://img-blog.csdnimg.cn/20191007181510232.png" width="200" height="200"></center><center><img src="https://img-blog.csdnimg.cn/20191007181600719.png" width="400" height="300"></center><p>每一格的计算代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> word_a[i] == word_d[j]:</span><br><span class="line">    cell[i][j] = cell[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cell[i][j] = max(cell[i<span class="number">-1</span>][j], cell[i][j<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://18301338128.github.io/images/pic/3.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://xu-ke.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://xu-ke.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04.3安装uwsgi</title>
    <link href="http://xu-ke.top/2019/10/04/error/"/>
    <id>http://xu-ke.top/2019/10/04/error/</id>
    <published>2019-10-04T08:12:00.799Z</published>
    <updated>2019-10-09T11:01:56.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://18301338128.github.io/images/pic/2.jpg" alt="image"></p><!-- <img src="https://18301338128.github.io/images/background.png" width=100% /> --><a id="more"></a><h4 id="ubuntu-16-04-3安装uwsgi"><a href="#ubuntu-16-04-3安装uwsgi" class="headerlink" title="ubuntu 16.04.3安装uwsgi"></a>ubuntu 16.04.3安装uwsgi</h4><p>==报错1 uwsgi ERROR: Command errored out with exit status 1==</p><p><a href="https://github.com/unbit/uwsgi/issues/1770" target="_blank" rel="noopener">原文地址</a></p><p>安装旧版本的编译器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  install gcc-4.7</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /usr/bin/gcc</span><br><span class="line">lrwxrwxrwx 1 root root 14 Aug  9 09:58 /usr/bin/gcc -&gt; /usr/bin/gcc-5</span><br></pre></td></tr></table></figure><p>建立软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/gcc</span><br><span class="line">sudo ln -s /usr/bin/gcc-4.7 /usr/bin/gcc</span><br></pre></td></tr></table></figure><p>安装uwsgi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi==2.0.15</span><br></pre></td></tr></table></figure><p>回到之前的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/gcc</span><br><span class="line">sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc</span><br></pre></td></tr></table></figure><p>==报错2 uwsgi: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/anaconda3/bin/libpcre.so.1 /lib</span><br></pre></td></tr></table></figure><h4 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br><span class="line">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>==报错3 Microsoft Visual C++ 14.0 is required. –rcssmin、rjsmin、django-compressor==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install rcssmin --install-option=&quot;--without-c-extensions&quot;</span><br><span class="line">pip install rjsmin --install-option=&quot;--without-c-extensions&quot;</span><br><span class="line">pip install django-compressor --upgrade</span><br></pre></td></tr></table></figure><p>查看历史版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install yolk3k</span><br><span class="line">$ yolk -V django</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://18301338128.github.io/images/pic/2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;!-- &lt;img src=&quot;https://18301338128.github.io/images/background.png&quot; width=100% /&gt; --&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://xu-ke.top/categories/python/"/>
    
    
      <category term="conda" scheme="http://xu-ke.top/tags/conda/"/>
    
      <category term="uwsgi" scheme="http://xu-ke.top/tags/uwsgi/"/>
    
  </entry>
  
</feed>
