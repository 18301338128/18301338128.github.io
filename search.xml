<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《算法图解》笔记]]></title>
    <url>%2F2019%2F10%2F07%2F%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[快速排序12345678def quicksort(array): if len(array)&lt;2: return array else: pivot=array[0] less = [i for i in array[1:] if i &lt; array[0]] greater = [i for i in array[1:] if i &gt; array[0]] return quicksort(less) + [pivot] + quicksort(greater) 广度优先搜索寻找朋友圈的销售商，搜索一条能到达的路径 12345678910111213141516171819202122from collections import dequegraph = &#123;&#125;graph['you'] = ['a', 'b', 'c']...def search(name): search_queue = deque() search_queue += graph(name) searched = [] while search_queue: person = search_queue.popleft() if person not in searched: if person_is_seller(person): print person + ' is a mango seller' return True else: search_queue += graph[person] searched.append(person) return Falsesearch('you') 狄克斯特拉算法 寻找起点到终点的最佳路径 适用于有向无环图和非负权重（负权重使用贝尔曼-福德算法） from to value start a 6 start b 2 a fin 1 b a 3 b fin 5 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859start a 6start b 2a fin 1b a 3b fin 5graph = &#123;&#125;graph['start'] = &#123;&#125;graph['start']['a'] = 6graph['start']['b'] = 2graph['a'] = &#123;&#125;graph['a']['fin'] = 1graph['b'] = &#123;&#125;graph['b']['a'] = 3graph['b']['fin'] = 5graph['fin'] = &#123;&#125;graph# &#123;'start': &#123;'a': 6, 'b': 2&#125;, 'a': &#123;'fin': 1&#125;, 'b': &#123;'a': 3, 'fin': 5&#125;, 'fin': &#123;&#125;&#125;infinity = float('inf')costs = &#123;&#125;costs['a'] = 6costs['b'] = 2costs['fin'] = infinitycosts # &#123;'a': 6, 'b': 2, 'fin': inf&#125;parents = &#123;&#125;parents['a'] = 'start'parents['b'] = 'start'parents['fin'] = Noneparents # &#123;'a': 'start', 'b': 'start', 'fin': None&#125;processed = [] def find_lowest_cost_node(costs): lowest_cost = float('inf') lowest_cost_node = None for node in costs: cost = costs[node] if cost &lt; lowest_cost and node not in processed: lowest_cost = cost lowest_cost_node = node return lowest_cost_nodenode = find_lowest_cost_node(costs)while node is not None: cost = costs[node] neighbors = graph[node] for n in neighbors.keys(): new_cost = cost + neighbors[n] print(node,n,cost,neighbors[n],new_cost,costs[n]) if costs[n] &gt; new_cost: costs[n] = new_cost parents[n] = node processed.append(node) node = find_lowest_cost_node(costs)processed # ['b', 'a', 'fin'] 动态规划背包问题找出背包能装下的物品价值最高的组合 1cell[i][j] = max(cell[i-1][j], cell[i-1][j-当前商品的重量]) 最长公共子串判断单词间最长公共串大小 1234if word_a[i] == word_b[j]: cell[i][j] = cell[i-1][j-1] + 1else: cell[i][j] = 0 最长公共子序列判断单词间公共串数量 1234if word_a[i] == word_d[j]: cell[i][j] = cell[i-1][j-1] + 1else: cell[i][j] = max(cell[i-1][j], cell[i][j-1]) 快速排序分而治之（divide and conquer, D&amp;C）思想的解题步骤： 找出基线条件，这种条件必须尽可能简单。 不断将问题分解（或者说缩小规模），直到符合基线条件。 python代码实现代码： 12345678def quicksort(array): if len(array)&lt;2: return array # 基线条件 else: pivot=array[0] # 递归条件 less = [i for i in array[1:] if i &lt; array[0]] greater = [i for i in array[1:] if i &gt; array[0]] return quicksort(less) + [pivot] + quicksort(greater) 广度优先搜索广度优先搜索 （breadth-first search，BFS）是一种用于图的查找算法，可帮助回答两类问题： 从节点A出发，有前往节点B的路径吗？ 从节点A出发，前往节点B的哪条路径最短？ 书中示例：在朋友圈中寻找卖芒果的销售商 python实现代码： 12345678910111213141516171819202122232425from collections import dequegraph = &#123;&#125;graph['you'] = ['a', 'b', 'c']...def search(name): search_queue = deque() search_queue += graph(name) searched = [] while search_queue: person = search_queue.popleft() if person not in searched: if person_is_seller(person): print person + ' is a mango seller' return True else: search_queue += graph[person] searched.append(person) return Falsedef person_is_seller(name): passsearch('you') 狄克斯特拉算法狄克斯特拉算法包含4个步骤： 找出“最便宜”的节点，即可在最短时间内到达的节点。 更新该节点的邻居的开销，节点的开销指的是从起点出发到该节点的时间 重复这个过程，直到对图中的每个节点都这样做了。 计算最终路径。 狄克斯特拉算法适用于以下情况： 有向无环图 非负权重（负权重使用贝尔曼-福德算法） 狄克斯特拉算法的实现，以下图为例，从起点到终点，途中有A和B点，怎样走才能使得距离最短呢？ 要编写解决这个问题的代码，需要三个散列表： graph记录图中节点间的关系，包括节点间指向和边的权重 costs记录节点的开销 parents记录父节点 三个散列表python代码如下： 1234567891011121314151617181920212223242526272829303132start a 6start b 2a fin 1b a 3b fin 5graph = &#123;&#125;graph['start'] = &#123;&#125;graph['start']['a'] = 6graph['start']['b'] = 2graph['a'] = &#123;&#125;graph['a']['fin'] = 1graph['b'] = &#123;&#125;graph['b']['a'] = 3graph['b']['fin'] = 5graph['fin'] = &#123;&#125;graph# &#123;'start': &#123;'a': 6, 'b': 2&#125;, 'a': &#123;'fin': 1&#125;, 'b': &#123;'a': 3, 'fin': 5&#125;, 'fin': &#123;&#125;&#125;infinity = float('inf')costs = &#123;&#125;costs['a'] = 6costs['b'] = 2costs['fin'] = infinitycosts # &#123;'a': 6, 'b': 2, 'fin': inf&#125;parents = &#123;&#125;parents['a'] = 'start'parents['b'] = 'start'parents['fin'] = Noneparents # &#123;'a': 'start', 'b': 'start', 'fin': None&#125;processed = [] # 用于记录处理过的节点 算法图如下： pythond代码如下： 1234567891011121314151617181920212223def find_lowest_cost_node(costs): lowest_cost = float('inf') lowest_cost_node = None for node in costs: cost = costs[node] if cost &lt; lowest_cost and node not in processed: lowest_cost = cost lowest_cost_node = node return lowest_cost_nodenode = find_lowest_cost_node(costs)while node is not None: cost = costs[node] neighbors = graph[node] for n in neighbors.keys(): new_cost = cost + neighbors[n] print(node,n,cost,neighbors[n],new_cost,costs[n]) if costs[n] &gt; new_cost: costs[n] = new_cost parents[n] = node processed.append(node) node = find_lowest_cost_node(costs) 动态规划动态规划先解决子问题，再解决大问题 背包问题背包问题旨在找出背包能装下的物品价值最高的组合对于1kg，2kg，3kg，和4kg的背包分别逐行计算能放下物品的最高重量，当进行到用4kg背包装电脑时，发现多了1kg，于是将1kg背包里的吉他加入4kg背包，得到3500。 每一格的计算代码 1cell[i][j] = max(cell[i-1][j], cell[i-1][j-当前商品的重量]) 最长公共子串最长公共子串用于判断单词间最长公共串大小如hish和fish 每一格的计算代码 1234if word_a[i] == word_b[j]: cell[i][j] = cell[i-1][j-1] + 1else: cell[i][j] = 0 最长公共子序列最长公共子序列用于判断单词间公共串数量如fosh和fish 每一格的计算代码 1234if word_a[i] == word_d[j]: cell[i][j] = cell[i-1][j-1] + 1else: cell[i][j] = max(cell[i-1][j], cell[i][j-1])]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 16.04.3安装uwsgi]]></title>
    <url>%2F2019%2F10%2F04%2Ferror%2F</url>
    <content type="text"><![CDATA[ubuntu 16.04.3安装uwsgi==报错1 uwsgi ERROR: Command errored out with exit status 1== 原文地址 安装旧版本的编译器 1sudo apt-get install gcc-4.7 12ls -l /usr/bin/gcclrwxrwxrwx 1 root root 14 Aug 9 09:58 /usr/bin/gcc -&gt; /usr/bin/gcc-5 建立软链接 12sudo rm /usr/bin/gccsudo ln -s /usr/bin/gcc-4.7 /usr/bin/gcc 安装uwsgi 1pip install uwsgi==2.0.15 回到之前的版本 12sudo rm /usr/bin/gccsudo ln -s /usr/bin/gcc-5 /usr/bin/gcc ==报错2 uwsgi: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory== 1ln -s /root/anaconda3/bin/libpcre.so.1 /lib 安装conda12wget https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.shbash Anaconda3-5.2.0-Linux-x86_64.sh ==报错3 Microsoft Visual C++ 14.0 is required. –rcssmin、rjsmin、django-compressor== 123pip install rcssmin --install-option=&quot;--without-c-extensions&quot;pip install rjsmin --install-option=&quot;--without-c-extensions&quot;pip install django-compressor --upgrade 查看历史版本 12$ pip install yolk3k$ yolk -V django]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>uwsgi</tag>
      </tags>
  </entry>
</search>
